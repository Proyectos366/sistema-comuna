generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model role {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios usuario[] @relation(name: "UsuarioRole")
}

model usuario {
  id           Int      @id @default(autoincrement())
  cedula       Int      @unique
  nombre       String
  nombre_dos   String?  @default("")
  apellido     String?
  apellido_dos String?  @default("")
  pais         String?  @default("")
  estado       String?  @default("")
  municipio    String?  @default("")
  parroquia    String?  @default("")
  sector       String?  @default("")
  direccion    String?  @default("")
  f_n          DateTime @default(now())
  cargo        String?  @default("")
  f_ingreso    DateTime @default(now())
  profesion    String?  @default("")
  correo       String   @unique
  token        String   @unique
  clave        String
  borrado      Boolean  @default(false)
  validado     Boolean  @default(false)
  id_rol       Int // Clave foránea hacia role
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  roles                  role                    @relation(name: "UsuarioRole", fields: [id_rol], references: [id])
  imagenes               imagen[] // Relación uno a muchos con Imagen
  CreadorDeDepartamentos departamento[]          @relation(name: "CreadorDepartamento")
  MiembrosDepartamentos  departamento[]          @relation(name: "MiembrosDepartamento")
  CreadorInstitucion     institucion[]           @relation(name: "CreadorInstitucion")
  MiembrosInstitucion    institucion[]           @relation(name: "MiembrosInstitucion")
  creadorDeComunas       comuna[]                @relation(name: "CreadorComuna")
  creadorDeCircuitos     circuito[]              @relation(name: "CreadorCircuito")
  creadorDeConsejos      consejo[]               @relation(name: "CreadorConsejo")
  beneficios             beneficio[]             @relation(name: "CreadorBeneficio")
  familiares             familiar[]              @relation(name: "CreadorFamiliar")
  voceros                vocero[]                @relation(name: "CreadorVocero") // El usuario solo crea voceros, no los "posee"
  paises                 pais[]                  @relation(name: "CreadorPais")
  estados                estado[]                @relation(name: "CreadorEstado")
  municipios             municipio[]             @relation(name: "CreadorMunicipio")
  parroquias             parroquia[]             @relation(name: "CreadorParroquia")
  asignacion_geograficas asignacion_geografica[] @relation(name: "CreadorAsignacionGeografica")
  cargos                 cargo[]                 @relation(name: "CreadorCargo")
  modulos                modulo[]                @relation(name: "CreadorModulo")
  formaciones            formacion[]             @relation(name: "CreadorFormacion")
  cursos                 curso[]                 @relation(name: "CreadorCurso")
  asistencias            asistencia[]            @relation(name: "CreadorAsistencia")
  entidades              entidad[]               @relation(name: "CreadorEntidad")
  proyecto               proyecto[]              @relation(name: "CreadorProyecto")
}

model imagen {
  id             Int      @id @default(autoincrement())
  path           String
  nombreOriginal String
  nombreSistema  String
  tipo           String
  formato        String
  peso           Int
  perfil         Boolean  @default(true)
  descripcion    String?  @default("sin descripcion")
  borrado        Boolean  @default(false)
  id_usuario     Int
  updatedAt      DateTime @default(now())
  createdAt      DateTime @default(now())

  usuarios usuario @relation(fields: [id_usuario], references: [id]) // Corrección: relación bien definida
}

model pais {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  capital     String
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  serial      String   @unique
  id_usuario  Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios usuario  @relation("CreadorPais", fields: [id_usuario], references: [id])
  estados  estado[] @relation("PaisEstados")
}

model estado {
  id          Int      @id @default(autoincrement())
  nombre      String
  capital     String
  cod_postal  String
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  serial      String   @unique
  id_usuario  Int
  id_pais     Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios   usuario     @relation("CreadorEstado", fields: [id_usuario], references: [id])
  pais       pais        @relation("PaisEstados", fields: [id_pais], references: [id])
  municipios municipio[] @relation("EstadoMunicipios")
}

model municipio {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  serial      String   @unique
  id_usuario  Int
  id_estado   Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios      usuario       @relation("CreadorMunicipio", fields: [id_usuario], references: [id])
  estados       estado        @relation("EstadoMunicipios", fields: [id_estado], references: [id])
  parroquias    parroquia[]   @relation("MunicipioParroquias")
  instituciones institucion[]
}

model parroquia {
  id           Int      @id @default(autoincrement())
  nombre       String
  descripcion  String?  @default("sin descripcion")
  borrado      Boolean  @default(false)
  serial       String   @unique
  id_usuario   Int
  id_municipio Int
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  usuarios   usuario    @relation("CreadorParroquia", fields: [id_usuario], references: [id])
  municipios municipio  @relation("MunicipioParroquias", fields: [id_municipio], references: [id])
  comunas    comuna[]   @relation("ComunaParroquia")
  circuitos  circuito[] @relation("CircuitoParroquia")
  consejos   consejo[]  @relation("ConsejoParroquia")
  voceros    vocero[]   @relation("VoceroParroquia")
}

model institucion {
  id           Int      @id @default(autoincrement())
  nombre       String   @unique
  descripcion  String?  @default("sin descripcion")
  rif          String   @unique
  pais         String
  estado       String
  municipio    String
  parroquia    String
  sector       String
  direccion    String
  borrado      Boolean  @default(false)
  id_usuario   Int
  id_municipio Int
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  creador       usuario        @relation(name: "CreadorInstitucion", fields: [id_usuario], references: [id])
  miembros      usuario[]      @relation("MiembrosInstitucion")
  municipios    municipio      @relation(fields: [id_municipio], references: [id])
  departamentos departamento[]
}

model departamento {
  id             Int      @id @default(autoincrement())
  nombre         String   @unique
  descripcion    String?  @default("sin descripcion")
  borrado        Boolean  @default(false)
  id_usuario     Int
  id_institucion Int
  updatedAt      DateTime @default(now())
  createdAt      DateTime @default(now())

  // Relaciones
  creador     usuario     @relation(name: "CreadorDepartamento", fields: [id_usuario], references: [id])
  miembros    usuario[]   @relation("MiembrosDepartamento")
  institucion institucion @relation(fields: [id_institucion], references: [id])

  formaciones formacion[] @relation(name: "FormacionDepartamento")
}

model cargo {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  id_usuario  Int
  descripcion String?  @default("sin descripcion")
  borrado     Boolean
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  usuarios usuario  @relation(name: "CreadorCargo", fields: [id_usuario], references: [id])
  voceros  vocero[]
}

model asignacion_geografica {
  id         Int     @id @default(autoincrement())
  pais       String? // Ej: "VE"
  estado     String? // Ej: "ARAGUA"
  municipio  String? // Ej: "GIRARDOT"
  parroquia  String? // Ej: "LAS DELICIAS"
  nivel      String // "pais", "estado", "municipio", "parroquia"
  borrado    Boolean @default(false)
  id_usuario Int

  usuarios usuario @relation("CreadorAsignacionGeografica", fields: [id_usuario], references: [id])
}

model comuna {
  id           Int      @id @default(autoincrement())
  nombre       String
  norte        String
  sur          String
  este         String
  oeste        String
  direccion    String
  punto        String
  rif          String?  @unique
  codigo       String   @unique
  borrado      Boolean  @default(false)
  id_usuario   Int // Clave foránea hacia usuario (administrador que crea la comuna)
  id_parroquia Int
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  usuarios   usuario   @relation(name: "CreadorComuna", fields: [id_usuario], references: [id])
  voceros    vocero[] // Voceros que pertenecen directamente a la comuna
  consejos   consejo[] // Consejos que están dentro de la comuna
  parroquias parroquia @relation("ComunaParroquia", fields: [id_parroquia], references: [id])
}

model circuito {
  id           Int      @id @default(autoincrement())
  nombre       String
  norte        String
  sur          String
  este         String
  oeste        String
  direccion    String
  punto        String
  borrado      Boolean  @default(false)
  validado     Boolean
  id_usuario   Int // Clave foránea hacia usuario (administrador que crea el circuito)
  id_parroquia Int
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  usuarios   usuario   @relation(name: "CreadorCircuito", fields: [id_usuario], references: [id])
  consejos   consejo[] // Consejos que pueden estar dentro de un circuito
  voceros    vocero[] // Voceros que pertenecen directamente a un circuito
  parroquias parroquia @relation("CircuitoParroquia", fields: [id_parroquia], references: [id])
}

model consejo {
  id           Int      @id @default(autoincrement())
  nombre       String
  norte        String
  sur          String
  este         String
  oeste        String
  direccion    String
  punto        String
  rif          String?  @unique
  codigo       String   @unique
  descripcion  String?  @default("sin descripcion")
  borrado      Boolean  @default(false)
  id_usuario   Int // Clave foránea hacia usuario (administrador que lo crea)
  id_comuna    Int? // Este consejo pertenece a una comuna
  id_circuito  Int? // Este consejo puede estar vinculado a un circuito
  id_parroquia Int // Nueva clave foránea para relacionar con parroquia
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  usuarios   usuario   @relation(name: "CreadorConsejo", fields: [id_usuario], references: [id])
  comunas    comuna?   @relation(fields: [id_comuna], references: [id])
  circuitos  circuito? @relation(fields: [id_circuito], references: [id])
  voceros    vocero[] // Voceros que pertenecen a este consejo
  parroquias parroquia @relation("ConsejoParroquia", fields: [id_parroquia], references: [id]) // Relación con parroquia
}

model entidad {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  id_usuario  Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios usuario  @relation(name: "CreadorEntidad", fields: [id_usuario], references: [id])
  voceros  vocero[]
}

model proyecto {
  id           Int      @id @default(autoincrement())
  nombre       String   @unique
  descripcion  String?  @default("sin descripcion")
  fecha_creado DateTime @default(now())
  borrado      Boolean  @default(false)
  id_usuario   Int
  estatus      String
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  usuarios usuario  @relation(name: "CreadorProyecto", fields: [id_usuario], references: [id])
  voceros  vocero[]
}

model beneficio {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  id_usuario  Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relaciones
  usuarios usuario  @relation(name: "CreadorBeneficio", fields: [id_usuario], references: [id])
  voceros  vocero[]
}

model familiar {
  id         Int      @id @default(autoincrement())
  nombre     String
  apellido   String
  cedula     Int      @unique
  parentesco String // ejemplo: madre, padre, hijo, etc.
  f_n        DateTime
  genero     Boolean
  telefono   String?
  direccion  String?
  borrado    Boolean  @default(false)
  id_vocero  Int
  id_usuario Int

  usuarios usuario @relation(name: "CreadorFamiliar", fields: [id_usuario], references: [id])
  vocero   vocero  @relation(fields: [id_vocero], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model vocero {
  id             Int      @id @default(autoincrement())
  nombre         String
  nombre_dos     String?
  apellido       String
  apellido_dos   String?
  cedula         Int      @unique
  genero         Boolean
  edad           Int
  telefono       String
  pais           String?  @default("")
  estado         String?  @default("")
  municipio      String?  @default("")
  parroquia      String?  @default("")
  sector         String?  @default("")
  direccion      String?  @default("")
  correo         String
  token          String   @unique
  laboral        String
  f_n            DateTime
  jefe_comunidad Boolean  @default(false)
  jefe_calle     Boolean  @default(false)
  borrado        Boolean  @default(false)
  id_usuario     Int
  id_comuna      Int?
  id_consejo     Int?
  id_circuito    Int?
  id_parroquia   Int
  id_entidad     Int?
  id_proyecto    Int?
  updatedAt      DateTime @default(now())
  createdAt      DateTime @default(now())

  usuarios   usuario   @relation(name: "CreadorVocero", fields: [id_usuario], references: [id])
  parroquias parroquia @relation("VoceroParroquia", fields: [id_parroquia], references: [id])
  comunas    comuna?   @relation(fields: [id_comuna], references: [id])
  consejos   consejo?  @relation(fields: [id_consejo], references: [id])
  circuitos  circuito? @relation(fields: [id_circuito], references: [id])

  beneficios  beneficio[]
  cursos      curso[]
  asistencias asistencia[]
  cargos      cargo[]
  familiares  familiar[]
  entidades   entidad[]
  proyectos   proyecto[]
}

model formacion {
  id              Int      @id @default(autoincrement())
  nombre          String   @unique
  descripcion     String?  @default("sin descripcion")
  id_usuario      Int
  id_departamento Int?
  borrado         Boolean  @default(false)
  culminada       Boolean  @default(false)
  updatedAt       DateTime @default(now()) @updatedAt
  createdAt       DateTime @default(now())

  usuarios      usuario       @relation(name: "CreadorFormacion", fields: [id_usuario], references: [id])
  departamentos departamento? @relation(name: "FormacionDepartamento", fields: [id_departamento], references: [id])
  modulos       modulo[]
  cursos        curso[]
}

model modulo {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?  @default("sin descripcion")
  borrado     Boolean  @default(false)
  id_usuario  Int
  updatedAt   DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())

  usuarios    usuario      @relation(name: "CreadorModulo", fields: [id_usuario], references: [id])
  formaciones formacion[]
  asistencias asistencia[]
}

model curso {
  id               Int       @id @default(autoincrement())
  id_vocero        Int
  id_formacion     Int
  id_usuario       Int
  fecha_completado DateTime?
  verificado       Boolean   @default(false)
  certificado      Boolean   @default(false)
  culminado        Boolean   @default(false)
  descripcion      String?   @default("sin descripcion")
  borrado          Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt

  usuarios    usuario      @relation(name: "CreadorCurso", fields: [id_usuario], references: [id])
  voceros     vocero       @relation(fields: [id_vocero], references: [id])
  formaciones formacion    @relation(fields: [id_formacion], references: [id])
  asistencias asistencia[]
}

model asistencia {
  id             Int      @id @default(autoincrement())
  id_vocero      Int
  id_modulo      Int
  id_curso       Int
  id_usuario     Int
  presente       Boolean
  formador       String?  @default("")
  fecha_registro DateTime @default(now())
  descripcion    String?  @default("sin descripcion")
  borrado        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  usuarios usuario @relation(name: "CreadorAsistencia", fields: [id_usuario], references: [id])
  voceros  vocero  @relation(fields: [id_vocero], references: [id])
  modulos  modulo  @relation(fields: [id_modulo], references: [id])
  cursos   curso   @relation(fields: [id_curso], references: [id])
}

model eventos {
  id           Int      @id @default(autoincrement())
  tabla        String
  accion       String
  id_objeto    Int
  id_usuario   Int
  ip           String?  @default("") // Dirección IP del usuario
  descripcion  String?  @default("")
  datosAntes   Json? // Datos anteriores (UPDATE o DELETE)
  datosDespues Json? // Datos nuevos (INSERT o UPDATE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
